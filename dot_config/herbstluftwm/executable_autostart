#!/usr/bin/env bash

#
# Aliases
#

# "herbstclient" is too long
hc() {
    herbstclient "$@"
}

# main modifier key
Mod=Mod4

# resizing steps lenght
resizestep=0.02


#
# Startup chain
#

hc emit_hook reload

# autodetect monitors and arrange according to autorandr settings
autorandr --change

# multi monitor setup here, e.g.:
# hc set_monitors 1280x1024+0+0 1280x1024+1280+0
# or simply spawn one monitor for each detected one:
hc detect_monitors

# Polybar
killall -q polybar
while pgrep -u $UID -x polybar >/dev/null; do sleep 1; done
polybar main &

# compositor
killall -q picom
while pgrep -u $UID -x picom >/dev/null; do sleep 1; done
picom --backend glx --experimental-backends &

# remove all existing keybindings
hc keyunbind --all

# remove all defined rules
hc unrule -F

# start sxhkd
killall -9 sxhkd
sxhkd &

# topbar
panel=~/.config/herbstluftwm/panel.sh
[ -x "$panel" ] || panel=/etc/xdg/herbstluftwm/panel.sh
# spawn on every monitor
for monitor in $(hc list_monitors | cut -d: -f1) ; do
    "$panel" "$monitor" &
done


#
# Herbstluftwm managemen
#

hc keybind $Mod-Shift-q quit
hc keybind $Mod-Shift-r reload


#
# Tags (frames containers)
#

# creation
tag_names=( {1..9} )
tag_keys=( {1..9} 0 )
hc rename default "${tag_names[0]}" || true
for i in "${!tag_names[@]}" ; do
    hc add "${tag_names[$i]}"
    key="${tag_keys[$i]}"
    if ! [ -z "$key" ] ; then
        hc keybind "$Mod-$key" use_index "$i"
        hc keybind "$Mod-Alt-$key" move_index "$i"
    fi
done

# switching
hc keybind $Mod-period   use_index +1 --skip-visible
hc keybind $Mod-comma    use_index -1 --skip-visible


#
# Frames & clients
#

# Sets the root window and its color (TODO: needed?)
#xsetroot -solid '#5A8E3A'

# general
hc keybind $Mod-i           jumpto urgent  # jump to urgent client
hc keybind $Mod-c           close  # close client
hc keybind $Mod-Control-c   remove  # remove frame
hc keybind $Mod-F11         fullscreen toggle  # toggle fullscreen for current window
hc keybind $Mod-Alt-space   set_attr clients.focus.floating toggle  # toggle floating for current window
# The following cycles through the available layouts within a frame, but skips
# layouts, if the layout change wouldn't affect the actual window positions.
# I.e. if there are two windows within a frame, the grid layout is skipped.
hc keybind $Mod-space                                                           \
            or , and . compare tags.focus.curframe_wcount = 2                   \
                     . cycle_layout +1 vertical horizontal max vertical grid    \
               , cycle_layout +1

# splitting frames
hc keybind $Mod-Control-u       split   right    0.5  # new frame on the right of the current one
hc keybind $Mod-Control-o       split   bottom   0.5  # new frame under the current one
hc keybind $Mod-Control-space   split   explode  # let the current frame explode into subframes

# resizing frames and floating clients
hc keybind $Mod-Control-Left    resize left +$resizestep
hc keybind $Mod-Control-Down    resize down +$resizestep
hc keybind $Mod-Control-Up      resize up +$resizestep
hc keybind $Mod-Control-Right   resize right +$resizestep

# focusing clients
hc keybind $Mod-Left    focus left
hc keybind $Mod-Down    focus down
hc keybind $Mod-Up      focus up
hc keybind $Mod-Right   focus right
hc keybind $Mod-Prior   cycle_all +1
hc keybind $Mod-Next    cycle_all -1

# moving clients in tiling and floating mode
hc keybind $Mod-Alt-Left  shift left
hc keybind $Mod-Alt-Down  shift down
hc keybind $Mod-Alt-Up    shift up
hc keybind $Mod-Alt-Right shift right

# mouse
hc mouseunbind --all
hc mousebind $Mod-Button1 move
hc mousebind $Mod-Button2 zoom
hc mousebind $Mod-Button3 resize

#
# rules
#

hc rule focus=on # normally focus new clients
hc rule floatplacement=smart
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' floating=on
hc rule instance~'floating' floating=on
hc rule windowtype='_NET_WM_WINDOW_TYPE_DIALOG' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)' manage=off

# Application-specific settings
#hc rule class~'(.*[Rr]xvt.*|.*[Tt]erm|Konsole)' tag=3 # move all terms to tag 3
hc rule instance='telegram-desktop' floating=on

hc set tree_style '╾│ ├└╼─┐'

# unlock, just to be sure
hc unlock


#
# Theme
#

hc attr theme.tiling.reset 1
hc attr theme.floating.reset 1
hc set frame_border_active_color '#222222cc'
hc set frame_border_normal_color '#101010cc'
hc set frame_bg_normal_color '#565656aa'
hc set frame_bg_active_color '#345F0Caa'
hc set frame_border_width 1
hc set always_show_frame on
hc set frame_bg_transparent on
hc set frame_transparent_width 5
hc set frame_gap 4

# hc attr theme.title_height 15
# hc attr theme.title_font 'Cantarell:pixelsize=12'  # example using Xft
# hc attr theme.title_font '-*-fixed-medium-r-*-*-13-*-*-*-*-*-*-*'
# hc attr theme.padding_top 2  # space below the title's baseline (i.e. text depth)
hc attr theme.active.color '#345F0Cef'
hc attr theme.title_color '#ffffff'
hc attr theme.normal.color '#323232dd'
hc attr theme.urgent.color '#7811A1dd'
hc attr theme.normal.title_color '#898989'
hc attr theme.inner_width 0
hc attr theme.inner_color black
hc attr theme.border_width 3
hc attr theme.floating.border_width 0
hc attr theme.floating.outer_width 0
hc attr theme.floating.outer_color black
hc attr theme.active.inner_color '#789161'
hc attr theme.urgent.inner_color '#9A65B0'
hc attr theme.normal.inner_color '#606060'
# copy inner color to outer_color
for state in active urgent normal ; do
    hc substitute C theme.${state}.inner_color \
        attr theme.${state}.outer_color C
done
hc attr theme.active.outer_width 1
hc attr theme.background_color '#141414'

hc set window_gap 0
hc set frame_padding 0
hc set smart_window_surroundings off
hc set smart_frame_surroundings on
hc set mouse_recenter_gap 0
